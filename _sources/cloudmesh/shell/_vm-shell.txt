
Cloudmesh Shell for VM Management
=================================

.. raw:: html

   <button type="button" class="btn btn-default navbar-btn">

`Notebook <http://localhost:8888/notebooks/docs/source/cloudmesh/shell/_vm-shell.ipynb>`__

.. raw:: html

   </button>

Initialization
--------------

A simple import allows you to enable all features of Cloudmesh in
Python.

.. code:: python

    import cloudmesh
.. code:: python

    print cloudmesh.shell("help")

.. parsed-literal::

    
    Documented commands (type help <topic>):
    ========================================
    EOF       dot2      help       list      plugins   script          var    
    banner    edit      image      loglevel  project   security_group  verbose
    clear     exec      info       man       py        status          version
    cloud     exp       init       metric    q         storm           vm     
    color     flavor    inventory  notebook  quit      timer           web    
    debug     graphviz  key        open      rain      use             yaml   
    defaults  group     label      pause     register  user          
    
    Ipython Commands
    ================
    notebook
    
    Gui Commands
    ============
    web
    
    Cloud Commands
    ==============
    cloud     group  inventory  rain            status  vm     loglevel
    defaults  image  list       register        storm   yaml   keys    
    flavor    init   metric     security_group  user    debug  project 
    
    


.. code:: python

    print cloudmesh.shell("debug off")

.. parsed-literal::

    Debug mode is off.
    


.. code:: python

    print cloudmesh.shell("loglevel error")

.. parsed-literal::

    ERROR mode is set.
    


Activating Clouds
-----------------

In order for cloudmesh to work with multiple coulds, we need to find out
first which clouds are available. Users can add their own clouds later
which we describe in the registration section.

Let us inspect what is already available by invoking the list command

.. code:: python

    print cloudmesh.shell("cloud list")

.. parsed-literal::

    +-----------+--------+
    | cloud     | active |
    +-----------+--------+
    | aws       |        |
    | azure     |        |
    | devstack  |        |
    | dreamhost |        |
    | hp        |        |
    | hp_east   |        |
    | india     |        |
    +-----------+--------+
    


As you see we have a number of clouds, but none of them is already
active. Thus we need to first activate a cloud. We assume that you have
an account on FutureGrid. Let us activate the cloud india

.. code:: python

    print cloudmesh.shell("cloud on india")

.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.697345972061
    Store time: 0.0153570175171
    [32mcloud 'india' activated.[0m
    


We also have a conveniet interactive selector to select a cloud to work
with, that however does not work with ipython

::

    "cloud select"

or you may also input "cloud select india" to select a specific cloud
india

To check if the cloud was activated, simply use the list command again

.. code:: python

    print cloudmesh.shell("cloud list")

.. parsed-literal::

    +-----------+--------+
    | cloud     | active |
    +-----------+--------+
    | aws       |        |
    | azure     |        |
    | devstack  |        |
    | dreamhost |        |
    | hp        |        |
    | hp_east   |        |
    | india     | True   |
    +-----------+--------+
    


Start a VM
----------

Now let us see how to start VMs on a cloud, here is how to start a VM on
cloud india

.. code:: python

    print cloudmesh.shell("vm start --cloud=india --image=futuregrid/ubuntu-14.04 --flavor=m1.small")

.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.364186048508
    Store time: 0.0172290802002
    * india
    Refreshing gvonlasz flavors india ->
    Refresh time: 0.241857051849
    Store time: 0.0082221031189
    Refreshing gvonlasz images india ->
    Refresh time: 0.592792987823
    Store time: 0.0661771297455
    
    # ######################################################################
    # Starting vm->gvonlasz_14 on cloud->india using image->futuregrid/ubuntu-14.04, flavor->m1.small, key->gvonlasz_flat-key
    # ######################################################################
    job status: PENDING
    


You may don't know what images or flavors are available on the cloud, or
you don't want to type a long command every time you start a VM, things
can get a lot easier by performing some setting up...

Set a default flavor or a default image
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Each cloud must have a default image and a default flavor to launch vm
instances in a simple step. The cloud set command provides a way to set
default values for an image or a flavor.

.. code:: python

    print cloudmesh.shell("cloud set flavor india --flavorid=2")

.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.521083116531
    Store time: 0.0117969512939
    * india
    Refreshing gvonlasz flavors india ->
    Refresh time: 0.309951066971
    Store time: 0.00973987579346
    [32m'm1.small' is selected[0m
    


.. code:: python

    print cloudmesh.shell("cloud set image india --image=futuregrid/ubuntu-14.04")

.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.358379125595
    Store time: 0.0185420513153
    * india
    Refreshing gvonlasz images india ->
    Refresh time: 0.689934015274
    Store time: 0.133810043335
    [32m'futuregrid/ubuntu-14.04' is selected[0m
    


Get Flavors or Images
---------------------

Available flavors can be listed with the following command.

.. code:: python

    print cloudmesh.shell("list flavor india --refresh")
refresh option updates the data from the IaaS cloud. The cached data in
the mongo database will be updated.

The ``list image`` command provides an available vm images on a selected
cloud.

.. code:: python

    print cloudmesh.shell("list image india --refresh")
Quick Start a VM
----------------

Once you configured a default flavor and a default image, you can start
a new VM with a few options.

.. code:: python

    vmname = cloudmesh.shell("label --raw")
We use ``vmname`` to delete the vm instance later in this tutorial.

.. code:: python

    print cloudmesh.shell("vm start --cloud=india --name={0}".format(vmname))
Delete a VM
-----------

If you know the id or name of the virtual machine that you want to
destroy, *delete* command in cloudmesh simply terminate the instance.

``cloudmesh.shell("vm delete {0} --cloud=india --force".format(vmname))``

.. warning:: Do not execute the delete command as it deletes all vms of
the tennant in openstack.

More options to launch a VM instance
------------------------------------

When you create a new VM instance, you can also choose multiple options
such as a flavor, an image associated with the instance. The
``vm start`` command accepts optional parameters as a user input of
these options. To see a brief description of the command, try
``cm "vm --help"`` in the IPython Notebook cell.

Available options are:

-  --cloud= give a cloud to work on, if not given, selected or default
   cloud will be used
-  --count= give the number of servers to start
-  --flavor= give the name of the flavor
-  --flavorid= give the id of the flavor
-  --group= give the group name of server
-  --image= give the name of the image
-  --imageid= give the id of the image

.. code:: python

    cloudmesh.shell("vm start --cloud=india --flavor=m1.medium --image=futuregrid/ubuntu-12.04")
Set a default cloud
~~~~~~~~~~~~~~~~~~~

If you want to make things even more convenient, you can set a default
cloud or select a cloud to work with so that you don't have to type in a
cloud everytime you need to specify a cloud, to set india as default
cloud

.. code:: python

    print cloudmesh.shell("cloud set default india")
to select a cloud

.. code:: python

    print cloudmesh.shell("cloud select india")
You can see a selected cloud as a temporarily default cloud to work
with.

For more details of using command cloud to set up a cloud

.. code:: python

    print cloudmesh.shell("cloud -h")
After all setting up above, now you can start a VM simply by typing in

Refreshing VM status
--------------------

After you have started or deleted VMs, you may want to check clouds' VMs
status. To refresh cloud india's VMs information

.. code:: python

    print cloudmesh.shell("list vm india --refresh")
Starting multiple VMs
---------------------

Sometimes we want to start more than one VM at the same time, we can
choose the option --count=int where int is the number of VMs you want to
start. For example, to start 3 VMs on india

.. code:: python

    import uuid;
    temp_group_name="ipython-tutorial-" + str(uuid.uuid4().get_hex().upper()[0:6])
We use the temporary group name to delete the VMs later in this
tutorial.

.. code:: python

    print cloudmesh.shell("vm start --cloud=india --count=3 --group={0}".format(temp_group_name))
Deleting VMs
------------

To delete one VM is easy, what if we want to delete 1000 VMs, we need a
more convenient way to do it. Cloudmesh shell provides several methods
to find the VMs and delete them, you may think there are two phases of
VM deletion, searching and deleting. Here are some examples:

Let's start with deleting the VMs that we started in the previous
example. We can delete them with the group name that we used.
``temp_group_name``

.. code:: python

    cloudmesh.shell("vm delete --group={0} --cloud=india --force".format(temp_group_name))
to delete all VMs of cloud india

``cloudmesh.shell("vm delete --cloud=india --force")``

Note here we use the option "--force", without it the shell will give
you a list of VMs to delete and ask for your confirmation.

to delete a VM by giving its name (you may always provide a cloud unless
you have specified a default cloud or have selected a cloud)

``cloudmesh.shell("vm delete --cloud=india sample_vm --force")``

to delete a VM by group

``cloudmesh.shell("vm delete --cloud=india --group=testgroup --force")``

We can also narrow the search result by giving more search conditions.
For example, to delete VMs of cloud india that they are also in the
group 'testgroup' and they have the prefix name 'abc' and their indices'
range is no greater than 100

``cloudmesh.shell("vm delete --cloud=india --group=testgroup --prefix=abc --range=,100 --force")``

Login to a VM
-------------

To login to a VM, you need to assign a public id to the VM you started,
for example, assign a public ip to a VM named test\_1 on cloud india:

.. code:: python

    vmname = cloudmesh.shell("label --raw")
.. code:: python

    print cloudmesh.shell("vm start --cloud=india")
.. code:: python

    cloudmesh.shell("vm ip {0} --cloud=india".format(vmname))
Then you can login to this VM by(note here you need to provide the login
name for your VM, it varys depend on the image you use while you start
the VM, e.g. for ubuntu, you may type --ln=ubuntu):

cloudmesh.shell("vm login {0} --ln=ubuntu --cloud=india".format(vmname))

*IPython Notebook does not support interactive shell for ssh login. The
command above can be executed in the Python console.*

If you just want to run some commands and get the return on the VM, you
may add the commands at the end following '--'(e.g. ls -a)

.. code:: python

    cloudmesh.shell("vm login {0} --ln=ubuntu --cloud=india -- ls -a".format(vmname))
For more details for command vm

print cloudmesh.shell("vm -h")

.. code:: python

    cloudmesh.shell("vm delete {0} --cloud=india".format(vmname))
Stop the vm that we started for this tutorial.

Vitual Machine Name
-------------------

In Cloudmesh, the default name of VM consists of your username and a
number, for example, alex\_1. ``label`` command allows you to manage or
modify the VM name as you wish.

.. code:: python

    cloudmesh.shell("label")



.. parsed-literal::

    next vm name:
    albert_71



cloudmesh.shell("label --prefix=albert --id=40")

If the user doesn’t provide a name while starting VMs, cloudmesh will
generate labels for them. The default form to name VMs is prefix\_index,
where prefix is a string and index is an non-negative integer. If a
index is used, the index value will be automatically added by one
waiting to be used for next VM. To check your current prefix and index
