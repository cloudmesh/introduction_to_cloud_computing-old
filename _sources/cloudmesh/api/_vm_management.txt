
Cloudmesh API for VM Management
===============================

Cloudmesh supports the simple management of heterogeneous virtual
machines from a variety of cloud frameworks, including Openstack, Azure,
AWS, Eucalyptus and but also AWS compatible clouds. This page shows how
to use Cloudmesh functions in python by a couple of examples on starting
or stopping virtual machine instances through the APIs.

Initialization
--------------

A simple import allows you to enable all features of Cloudmesh in
Python.

.. code:: python

    import cloudmesh
Activating Clouds
-----------------

Cloudmesh provides *yaml* or *mongo* option where to load basic
information. *yaml* relies on the yaml files in the $HOME/.cloudmesh
directory, *mongo* retrieves information from the mongo database.

.. code:: python

    mesh = cloudmesh.mesh("mongo")
Get a username
~~~~~~~~~~~~~~

In most Cloudmesh functions, you need to provide a username to tell the
server who is going to use cloud services.

.. code:: python

    username = cloudmesh.load().username()
Activate the user account
~~~~~~~~~~~~~~~~~~~~~~~~~

With the activation, the connection to IaaS cloud is established.

.. code:: python

    mesh.activate(username)
Start a VM
----------

Now let us see how to start VMs on a cloud, here is how to start a VM on
cloud india.

.. code:: python

    result = mesh.start(cloud="india", cm_user_id="Taylor", prefix="hoho", index=5, flavor="m1.small", image="futuregrid/ubuntu-14.04")
You may don’t know what images or flavors are available on the cloud, or
you don’t want to type a long line every time you start a VM, things can
get a lot easier by performing some setting up.

Set a default flavor or image
-----------------------------

Each cloud must have a default image and a default flavor to launch vm
instances in a simple step. default function provides a way to set
default values for an image o a flavor. In this example, we use *image*,
*flavor* variables which created from the examples above.

Need a help for the function?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can execute a cell with a function name and a single question mark
(?) to see a short description of a function. A double question marks
(??) provide a source code with a docstring of the function. Try
*mesh.default?* or *mesh.default??*

.. code:: python

    defaults = mesh.default('india', 'image', image)
.. code:: python

    defaults = mesh.default('india', 'flavor', flavor)
Get Flavors or Images
---------------------

Available flavors can be listed with the following function.

.. code:: python

    mesh.flavors(cm_user_id=username, clouds=["india"])
refresh function updates the data from the IaaS cloud. The cached data
in the mongo database will be updated.

.. code:: python

    mesh.refresh(username,types=['flavors'],names=["india"])
The functions about vm images provide an available vm images on a
selected cloud.

.. code:: python

    mesh.images(clouds=['india'],cm_user_id=username)
Select a flavor
~~~~~~~~~~~~~~~

Flavor is also selectable. The selected image or flavor can be used to
set a default image or a default flavor.

.. code:: python

    flavor = mesh.flavor('india', 'm1.small')
Select an image
~~~~~~~~~~~~~~~

If you know the name of the vm image, you can specify the vm image to
user it later. In this example, we choose Ubuntu trusty 14.04 image.

.. code:: python

    image=mesh.image('india','futuregrid/ubuntu-14.04')
Quick Start a VM
----------------

A simple function *start* provides a quick launch of vm instances in
cloudmesh.

.. code:: python

    result = mesh.start("india", username)
Delete VM
---------

If you know the id of the virtual machine that you want to destroy,
*delete* function in cloudmesh simply terminate the instance. This
example deletes the vm that we just launched above by getting the id
from the result dict.

.. code:: python

    server = result['server']['id']
    mesh.delete(cloud, server, username)
More options to launch a VM instance
------------------------------------

When you create a new VM instance, you can also choose multiple options
such as a flavor, an image, or a key associated with the instance.
*start()* function accepts keyword parameters as a user input of these
options. To see a brief description of the function, try *mesh.start?*
in the IPython Notebook cell.

Available options are: with \* ``cloud``: cloud id e.g. india \*
``cm_user_id``: portal user id \* ``prefix``: The VM instance name
starts \* ``index``: The number of vm instances (auto increment) \*
``flavor``: flavor name e.g. m1.small \* ``image``: image name e.g.
futuregrid/ubuntu-14.04 \* ``key``: key name to use \* ``meta``: data in
python dict e.g. {"cm\_user\_id": "brian"}

.. code:: python

    result = mesh.start("india", "Taylor", index=5, prefix="hoho")
Vitual Machine Name
-------------------

In Cloudmesh, the default VM name consists of your username and an auto
incremented number, for example, *alex\_1*. Couple of functions allow
you to manage or modify the VM name as you wish.

.. code:: python

    mesh.vmname()



.. parsed-literal::

    u'Alex_37'



``vmname()`` without parameters returns the current VM name that you can
use. If you want to use a different name, you can specify *prefix=''*
and *idx=''* as parameters.

.. code:: python

    mesh.vmname("Brian", 10)



.. parsed-literal::

    u'Brian_10'



vmname\_next() returns a VM name with an increased index number.

.. code:: python

    mesh.vmname_next()



.. parsed-literal::

    u'Brian_11'



There are some tricks to update the index number in *vmname()* function.

.. code:: python

    mesh.vmname("Alex", "+5")



.. parsed-literal::

    u'Alex_21'



Assign a public IP address to the VM
------------------------------------

assign\_public\_ip() function obtains a public IP address and assign it
to the VM.

.. code:: python

    ip=mesh.assign_public_ip('india', server, username)
SSH to the VM
-------------

Once you obtained the public ip address, you can execute a test command
via SSH to the VM. You can use wait() function with retry options.
Otherwise, you can simply use ssh\_execute() function.

.. code:: python

    mesh.wait(ipaddr=ip, command="uname -a", interval=5, retry=10)
.. code:: python

    mesh.ssh_execute(ipaddr=ip, command="uname -a")
Refreshing VM status
--------------------

The information of VM instances can be displayed with ``servers()``
function.

.. code:: python

    mesh.refresh(username, names=["india"],types=["servers"])
.. code:: python

    mesh.servers(clouds=["india"],cm_user_id=username)