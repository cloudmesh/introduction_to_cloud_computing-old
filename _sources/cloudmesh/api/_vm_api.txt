
Cloudmesh API for VM Management
===============================

.. raw:: html

   <button type="button" class="btn btn-default navbar-btn">

`Notebook <http://localhost:8888/notebooks/docs/source/cloudmesh/api/_vm_api.ipynb>`__

.. raw:: html

   </button>

Cloudmesh supports the simple management of heterogeneous virtual
machines from a variety of cloud frameworks, including Openstack, Azure,
AWS, Eucalyptus and but also AWS compatible clouds. This page shows how
to use Cloudmesh functions in python by a couple of examples on starting
or stopping virtual machine instances through the APIs.

Initialization
--------------

A simple import allows you to enable all features of Cloudmesh in
Python.

.. code:: python

    import cloudmesh
.. code:: python

    from pprint import pprint
Activating Clouds
-----------------

Cloudmesh provides *yaml* or *mongo* option where to load basic
information. *yaml* relies on the yaml files in the $HOME/.cloudmesh
directory, *mongo* retrieves information from the mongo database.

.. code:: python

    mesh = cloudmesh.mesh("mongo")
Get a username
~~~~~~~~~~~~~~

In most Cloudmesh functions, you need to provide a username to tell the
server who is going to use cloud services.

.. code:: python

    username = cloudmesh.load().username()
.. code:: python

    print username

.. parsed-literal::

    gvonlasz


Activate the user account
~~~~~~~~~~~~~~~~~~~~~~~~~

With the activation, the connection to IaaS cloud is established.

.. code:: python

    mesh.activate(username)

.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.305170059204
    Store time: 0.00300216674805


Register a cloud
~~~~~~~~~~~~~~~~

.. code:: python

    cloudmesh.shell("cloud on india")



.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.282967090607
    Store time: 0.00245690345764
    [32mcloud 'india' activated.[0m



.. code:: python

    cloudmesh.shell("cloud list")



.. parsed-literal::

    +-----------+--------+
    | cloud     | active |
    +-----------+--------+
    | aws       |        |
    | azure     |        |
    | devstack  |        |
    | dreamhost |        |
    | hp        |        |
    | hp_east   |        |
    | india     | True   |
    +-----------+--------+



Each cloud must have a default image and a default flavor to launch vm
instances in a simple step. default function provides a way to set
default values for an image o a flavor. In this example, we use *image*,
*flavor* variables which created from the examples above.

Need a help for the function?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can execute a cell with a function name and a single question mark
(?) to see a short description of a function. A double question marks
(??) provide a source code with a docstring of the function. Try
*mesh.default?* or *mesh.default??*

Get Flavors or Images
---------------------

Cloudmesh retrieves information from a cache that need to be refreshed
in case you like to get the newest values. At the beginning you have to
call refresh so that he information from the cloud is populated into the
cache.

.. code:: python

    mesh.refresh(username,types=['flavors', 'images'],names=["india"])

.. parsed-literal::

    * india
    Refreshing gvonlasz flavors india ->
    Refresh time: 0.179011821747
    Store time: 0.00220489501953
    Refreshing gvonlasz images india ->
    Refresh time: 0.43066906929
    Store time: 0.00897192955017


Available flavors can be listed with the following function.

.. code:: python

    flavors = mesh.flavors(cm_user_id=username, clouds=["india"])
Let us display the names of the flavors

The functions about vm images provide an available vm images on a
selected cloud.

.. code:: python

    for id in flavors["india"]:
        print flavors["india"][id]["name"]

.. parsed-literal::

    m1.tiny
    m1.medium
    m1.small
    m1.xlarge
    m1.large


.. code:: python

    images = mesh.images(clouds=['india'],cm_user_id=username)
.. code:: python

    for id in images["india"]:
        print images["india"][id]["name"]

.. parsed-literal::

    salsahpc/cloud-mooc-m1-large-4GB
    CentOS6
    SL64-blank-sparse10gb-C vmdk
    cglmoocs/ipython
    futuregrid/centos-6
    DaLiAna-vm2014e-geant4.10.vmdk Jan best
    ubuntu-13.10
    futuregrid/ubuntu-14.04
    fg101/richieriee/my-ubuntu-01
    sl64-gluex-vm2014e-40gb.vmdk Justin
    futuregrid/fedora-19
    fg10/jcharcal/centos6.5_x86_64
    balewski/kernel-2.6.32-431.5.1-sl65
    SL64-blank-sparse40GB vmdk
    Ubuntu-12.04-blank2.vmdk
    balewski/ramdisk-2.6.32-431.5.1-sl65
    sl6_x64-qemu  french ?bad
    balewski/sl6.5-blank-80gb-b works
    grp17Cent
    futuregrid/ubuntu-12.04
    ndssl-vt/ubuntu-12.04-small
    futuregrid/fedora-20
    fg7/rynge/centos6-v1
    ubuntu12-comet
    balewski/daliana-vm2014e2-sl6.5-geant4.10-root5.34
    DaLiAna-vm2014d-SL64-A.vmdk


Select a flavor
~~~~~~~~~~~~~~~

Flavor is also selectable. The selected image or flavor can be used to
set a default image or a default flavor.

.. code:: python

    flavor = mesh.flavor('india', 'm1.small')
Select an image
~~~~~~~~~~~~~~~

If you know the name of the vm image, you can specify the vm image to
user it later. In this example, we choose Ubuntu trusty 14.04 image.

.. code:: python

    image=mesh.image('india','futuregrid/ubuntu-14.04')
Set a default flavor or image
-----------------------------

.. code:: python

    defaults = mesh.default('india', 'image', image)
.. code:: python

    defaults = mesh.default('india', 'flavor', flavor)
.. code:: python

    pprint(defaults)

.. parsed-literal::

    {u'_id': ObjectId('54242b0b6d8fecaafd838a11'),
     u'activeclouds': [u'india'],
     u'cm_user_id': u'gvonlasz',
     u'flavors': {u'india': u'2'},
     u'group': None,
     u'images': {u'india': u'ba327564-5969-4309-b3f3-b67764038e66'},
     u'index': u'41',
     u'key': u'flat-key',
     u'pagestatus': {u'india': u'true'},
     u'prefix': u'gvonlasz',
     u'project': u'fg82',
     u'registered_clouds': [u'india'],
     u'securitygroup': u'development',
     u'shell_print_format': u'table'}


.. code:: python

    image = "futuregrid/ubuntu-14.04"
.. code:: python

    flavor = "m1.small"
.. code:: python

    cloud = "india"
Quick Start a VM
----------------

A simple function *start* provides a quick launch of vm instances in
cloudmesh.

.. code:: python

    result = mesh.start("india", username)
.. code:: python

    pprint (result)

.. parsed-literal::

    {'cloud': 'india',
     'cm_user_id': 'gvonlasz',
     'flavor': u'm1.small',
     'flavor_id': u'2',
     'image': u'futuregrid/ubuntu-14.04',
     'image_id': u'ba327564-5969-4309-b3f3-b67764038e66',
     'key': u'gvonlasz_flat-key',
     'name': u'gvonlasz_41',
     u'server': {u'OS-DCF:diskConfig': u'MANUAL',
                 u'adminPass': u'J6fnixrXGk5e',
                 u'id': u'7547ecc9-61b8-42a4-9dac-0064a7407a63',
                 u'links': [{u'href': u'http://149.165.146.57:8774/v1.1/8bc7e259464944b3bf4d8b050d1ab935/servers/7547ecc9-61b8-42a4-9dac-0064a7407a63',
                             u'rel': u'self'},
                            {u'href': u'http://149.165.146.57:8774/8bc7e259464944b3bf4d8b050d1ab935/servers/7547ecc9-61b8-42a4-9dac-0064a7407a63',
                             u'rel': u'bookmark'}],
                 u'security_groups': [{u'name': u'default'}]}}


Delete VM
---------

.. code:: python

    server = result['server']['id']
.. code:: python

    mesh.delete(cloud, server, username)



.. parsed-literal::

    {'release_unused_public_ips': True, 'vm_delete': {'msg': 'success'}}



If you know the id of the virtual machine that you want to destroy,
*delete* function in cloudmesh simply terminate the instance. This
example deletes the vm that we just launched above by getting the id
from the result dict.

Start a VM
----------

Now let us see how to start VMs on a cloud, here is how to start a VM on
cloud india.

.. code:: python

    result = mesh.start(cloud=cloud, 
                        cm_user_id=username,
                        flavor=flavor, 
                        image=image)
You may donâ€™t know what images or flavors are available on the cloud, or
you donâ€™t want to type a long line every time you start a VM, things can
get a lot easier by performing some setting up.

.. code:: python

    pprint (result)

.. parsed-literal::

    {'cloud': 'india',
     'cm_user_id': 'gvonlasz',
     'flavor': u'm1.small',
     'flavor_id': u'2',
     'image': u'futuregrid/ubuntu-14.04',
     'image_id': u'ba327564-5969-4309-b3f3-b67764038e66',
     'key': u'gvonlasz_flat-key',
     'name': u'gvonlasz_42',
     u'server': {u'OS-DCF:diskConfig': u'MANUAL',
                 u'adminPass': u'ETrauXf83o7M',
                 u'id': u'45b70984-12e1-40ec-a809-f46923ee3eac',
                 u'links': [{u'href': u'http://149.165.146.57:8774/v1.1/8bc7e259464944b3bf4d8b050d1ab935/servers/45b70984-12e1-40ec-a809-f46923ee3eac',
                             u'rel': u'self'},
                            {u'href': u'http://149.165.146.57:8774/8bc7e259464944b3bf4d8b050d1ab935/servers/45b70984-12e1-40ec-a809-f46923ee3eac',
                             u'rel': u'bookmark'}],
                 u'security_groups': [{u'name': u'default'}]}}



More options to launch a VM instance
------------------------------------

When you create a new VM instance, you can also choose multiple options
such as a flavor, an image, or a key associated with the instance.
*start()* function accepts keyword parameters as a user input of these
options. To see a brief description of the function, try *mesh.start?*
in the IPython Notebook cell.

Available options are: with \* ``cloud``: cloud id e.g. india \*
``cm_user_id``: portal user id \* ``prefix``: The VM instance name
starts \* ``index``: The number of vm instances (auto increment), if you
set this make sure it is higher than the last index, as it will aslo set
the default index \* ``flavor``: flavor name e.g. m1.small \* ``image``:
image name e.g. futuregrid/ubuntu-14.04 \* ``key``: key name to use \*
``meta``: data in python dict e.g. {"cm\_user\_id": username}

``result = mesh.start("india", username, prefix=username)``

Vitual Machine Name
-------------------

In Cloudmesh, the default VM name consists of your username and an auto
incremented number, for example, *alex\_1*. Couple of functions allow
you to manage or modify the VM name as you wish.

.. code:: python

    mesh.vmname()



.. parsed-literal::

    u'gvonlasz_43'



``vmname()`` without parameters returns the current VM name that you can
use.

If you want to use a different name, you can specify prefix='' and
idx='' as parameters. However be aware that using this will also reset
the default values. Thus if you specify a number that is smaller than
the current number in the vms, you may overwrite in time the previos
name and end up with duplicated names.

``mesh.vmname(username, 10)``

vmname\_next() returns a VM name with an increased index number.

``mesh.vmname_next()``

There are some tricks to update the index number in *vmname()* function.

``mesh.vmname(username, "+5")``

Assign a public IP address to the VM
------------------------------------

assign\_public\_ip() function obtains a public IP address and assign it
to the VM.

.. code:: python

    server = result['server']['id']
.. code:: python

    pprint (result['name'])

.. parsed-literal::

    u'gvonlasz_42'


.. code:: python

    ip=mesh.assign_public_ip('india', server, username)
.. code:: python

    print ip

.. parsed-literal::

    149.165.158.31


SSH to the VM
-------------

Once you obtained the public ip address, you can execute a test command
via SSH to the VM. You can use wait() function with retry options.
Otherwise, you can simply use ssh\_execute() function.

.. code:: python

    result = mesh.wait(ipaddr=ip, interval=2, retry=10)

.. parsed-literal::

    0 try to execute via ssh...


.. code:: python

    print result

.. parsed-literal::

    True


.. code:: python

    mesh.ssh_execute(ipaddr=ip, command="uname -a")



.. parsed-literal::

    Linux gvonlasz-42 3.13.0-35-generic #62-Ubuntu SMP Fri Aug 15 01:58:42 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux



.. warning: there is currently a limitation if the ip has already been
added previously added to your known host file. in that case you must
remove it first from the ~/.ssh/known\_hosts file.

Refreshing VM status
--------------------

The information of VM instances can be displayed with ``servers()``
function.

.. code:: python

    mesh.refresh(username, names=["india"],types=["servers"])

.. parsed-literal::

    * india
    Refreshing gvonlasz servers india ->
    Refresh time: 0.351860046387
    Store time: 0.00319504737854


.. code:: python

    for serverid in mesh.servers(clouds=["india"],cm_user_id=username)["india"].keys():
        server =  mesh.servers(clouds=["india"],cm_user_id=username)["india"][serverid]
        print server['name']

.. parsed-literal::

    gvonlasz_39
    gvonlasz_42
    gvonlasz_38
    gvonlasz_40
    gvonlasz-001
    gvonlasz_38


