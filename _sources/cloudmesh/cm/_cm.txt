
Cloudmesh ``cm`` Command
========================

.. raw:: html

   <button type="button" class="btn btn-default navbar-btn">

`Notebook <http://localhost:8888/notebooks/docs/source/cloudmesh/cm/_cm.ipynb>`__

.. raw:: html

   </button>

iPython Execution of shell commands
-----------------------------------

In this section we use one of the build in features of iPython. IPython
provides various mechanisms to call programs within its shell. One of
the ways to do so is to use the ! character at the beginning of a line
to execute the command in the shell.

However, there are more convenient ways to eliminate the ! sign at the
beginning of a line. One way is to use the alias command, another is to
use the %rehasx command.

IPython Alias
~~~~~~~~~~~~~

With the alias command we simply define a new command with the name cm
that we can call directly from IPython. Here we make sure that the
parameters ar between "" so that they are properly set. Just execute the
following lines.

.. code:: python

    alias cm cm %s
Now let us test the command and lets print the version of cloudmesh cm

.. code:: python

    cm version

.. parsed-literal::

    1.0.6


Python %rehashx
~~~~~~~~~~~~~~~

In addition to the direct specification IPython has also a rehashx
function, that loads the commands found in the $PATH variable so you can
execute the without !.

.. code:: python

    %rehashx
.. code:: python

    cm version

.. parsed-literal::

    1.0.6


We are using now one of the methods to call the cm commands in the
following sections.

``cm`` Command
--------------

The ``cm`` command has a number of options that are useful to pass a
script or a command directly into cm. Please however not that in some
cases the command must be quoted to avoid confusion between flags used
for cm and flags used for its subcommands. Let us invoke the -h flag to
see which options cm has.

.. code:: python

    cm -h

.. parsed-literal::

    cm.
    
        Usage:
          cm [-q] help
          cm [-v] [-b] [--file=SCRIPT] [-i] [COMMAND ...]
    
        Arguments:
          COMMAND                  A command to be executed
    
        Options:
          --file=SCRIPT  -f  SCRIPT  Executes the script
          -i                 After start keep the shell interactive,
                             otherwise quit [default: False]
          -b                 surpress the printing of the banner [default: False]
        


Help
~~~~

Now let us execute the help command to see what other functions are
supported. As cm is based on cmd3 that you can find in pypi it inherits
a number of commands from cmd3. However, more importantly it also
obtains a number of commands from cm itself. To more easily distinguish
the categories of the cloud related commands we introduced two of them
called GUI commands and cloud commands.

.. code:: python

    cm help

.. parsed-literal::

    
    Documented commands (type help <topic>):
    ========================================
    EOF       dot2      help       list      plugins   script          verbose
    banner    edit      image      loglevel  project   security_group  version
    clear     exec      info       man       py        storm           vm     
    cloud     exp       init       metric    q         timer           web    
    color     flavor    inventory  notebook  quit      use             yaml   
    debug     graphviz  key        open      rain      user          
    defaults  group     label      pause     register  var           
    
    Ipython Commands
    ================
    notebook
    
    Gui Commands
    ============
    web
    
    Cloud Commands
    ==============
    cloud     group  inventory  rain            storm  yaml      keys   
    defaults  image  list       register        user   debug     project
    flavor    init   metric     security_group  vm     loglevel
    


Starting the Web Browser
~~~~~~~~~~~~~~~~~~~~~~~~

To start the browser, simply type the command

.. raw:: html

   <pre>cm web</pre>





Listing Clouds
~~~~~~~~~~~~~~

.. code:: python

    cm cloud list

.. parsed-literal::

    +-----------+--------+
    | cloud     | active |
    +-----------+--------+
    | aws       |        |
    | azure     |        |
    | devstack  |        |
    | dreamhost |        |
    | hp        |        |
    | hp_east   |        |
    | india     | True   |
    +-----------+--------+


Let us inspect the parameters. To limit the output we just display the
first 10 lines of the help/man page. We see the --column option in the
list command.

.. code:: python

    cm help cloud | head -n 10 

.. parsed-literal::

    
    ::
    
        Usage:
            cloud [list] [--column=COLUMN] [--format=FORMAT]
            cloud info [CLOUD|--all] [--format=FORMAT]
            cloud alias NAME [CLOUD]
            cloud select [CLOUD]
            cloud on [CLOUD]
            cloud off [CLOUD]


...

For more information, read the help page. It essentially allows us to
display some more useful information beyond to just document the active
clouds. Let us also display the label. This is done with the following
command.

.. code:: python

    cm "cloud list --column=active,label"

.. parsed-literal::

    +-----------+--------+--------------------+
    | cloud     | active | label              |
    +-----------+--------+--------------------+
    | aws       |        | aws                |
    | azure     |        | waz                |
    | devstack  |        | localhost_icehouse |
    | dreamhost |        | dreamhost          |
    | hp        |        | hpos               |
    | hp_east   |        | hpeos              |
    | india     | True   | ios_havana         |
    +-----------+--------+--------------------+


Let us now demonstrate a common error by not using proper quoting. This
occurs when you use option flags with the command. Here our current
parser is unable to distinguish between the options passed to cm and the
options as used in the cm command. You see the usage message that we do
not have a --column in the cm command. To avoid thie use the " " as
previously shown.

.. code:: python

    cm cloud list --column=active,label

.. parsed-literal::

    Usage:
          cm [-q] help
          cm [-v] [-b] [--file=SCRIPT] [-i] [COMMAND ...]

